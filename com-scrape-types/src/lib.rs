//! Support types and traits for bindings generated by `com-scrape`.

mod class;
mod ptr;

#[cfg(test)]
mod tests;

use std::ffi::c_void;

pub use class::{Class, ComWrapper, Construct, Header, InterfaceList, MakeHeader, Wrapper};
pub use ptr::{ComPtr, ComRef, SmartPtr};

/// A 16-byte unique identifier for a COM interface.
pub type Guid = [u8; 16];

/// Implemented by interfaces that derive from the `IUnknown` interface (or an equivalent thereof).
///
/// Represents the base interface that all COM objects must implement and from which all COM
/// interfaces must derive. Corresponds to the `IUnknown` interface. Includes functionality for
/// reference counting ([`add_ref`](Self::add_ref) and [`release`](Self::release) and for
/// dynamically casting between interface types ([`query_interface`](Self::query_interface)).
///
/// All interface types generated by `com-scrape` will implement this trait.
pub trait Unknown {
    /// Checks if an object implements the interface corresponding to the given GUID, and if so,
    /// returns a corresponding interface pointer for the object and increments the object's
    /// reference count.
    unsafe fn query_interface(this: *mut Self, iid: &Guid) -> Option<*mut c_void>;

    /// Increments an object's reference count and returns the resulting count.
    unsafe fn add_ref(this: *mut Self) -> usize;

    /// Decrements an object's reference count and returns the resulting count.
    unsafe fn release(this: *mut Self) -> usize;
}

/// Implemented by all COM interface types.
///
/// # Safety
///
/// If a type `I` implements `Interface`, it must have the same layout as the pointer type
/// `*const I::Vtbl`.
///
/// If `I::inherits(J::IID)` returns `true`, then the layout of `J::Vtbl` must be a prefix of the
/// layout of `I::Vtbl`, i.e. a valid pointer to an instance of `I::Vtbl` must also be valid
/// pointer to an instance of `J::Vtbl`.
pub unsafe trait Interface: Unknown {
    /// The type of the virtual method table for this interface.
    type Vtbl;

    /// A 16-byte unique identifier ([`Guid`]) for the COM interface represented by this type.
    const IID: Guid;

    /// Returns `true` if this interface transitively inherits from the interface identified by
    /// `iid`.
    ///
    /// Note that this has safety implications; see the top-level documentation for [`Interface`].
    fn inherits(iid: &Guid) -> bool;
}

/// Represents the "is-a" relationship for interfaces.
///
/// If interface `I` implements `Inherits<J>`, it is valid to cast a pointer of type `*mut I` to a
/// pointer of type `*mut J` and to call any of `J`'s methods via that pointer.
///
/// The `Inherits` relation should be reflexive and transitive, i.e. `I: Inherits<I>` should be
/// true for any type `I`, and if `I: Inherits<J>` and `J: Inherits<K>` are true, then
/// `I: Inherits<K>` should also be true. However, this is not a safety requirement.
///
/// # Safety
///
/// [`Interface`] is a supertrait of `Inherits`, so all of `Interface`'s safety requirements also
/// apply to `Inherits`. In particular, if `I` implements `Inherits`, it must have the same layout
/// as the pointer type `*const I::Vtbl`.
///
/// If `I` implements `Inherits<J>`, then the layout of `J::Vtbl` must be a prefix of the layout of
/// `I::Vtbl`, i.e. a valid pointer to an instance of `I::Vtbl` must also be a valid pointer to an
/// instance of `J::Vtbl`.
pub unsafe trait Inherits<I: Interface>: Interface {}

unsafe impl<I: Interface> Inherits<I> for I {}
